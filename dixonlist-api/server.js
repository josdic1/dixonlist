import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import pg from "pg";

dotenv.config();
console.log("DATABASE_URL:", process.env.DATABASE_URL);

const app = express();
app.use(cors());
app.use(express.json());

const pool = new pg.Pool({
   connectionString: process.env.DATABASE_URL,
   ssl: { rejectUnauthorized: false }
});

// ✅ Fetch all tasks
app.get("/tasks", async (req, res) => {
   try {
      const result = await pool.query(`
         SELECT id, task, status, room, due_date, description, date_created, date_modified 
         FROM tasks ORDER BY date_created DESC
      `);
      res.json(result.rows);
   } catch (error) {
      console.error("Error fetching tasks:", error);
      res.status(500).json({ error: "Internal Server Error" });
   }
});


// ✅ Create a new task (UUID is auto-generated by DB)
app.post("/tasks", async (req, res) => {
   const { task, status = "Not Started", room, due_date, description } = req.body;
   try {
      const result = await pool.query(
         `INSERT INTO tasks (task, status, room, due_date, description) 
          VALUES ($1, $2, $3, $4, $5) RETURNING *;`,
         [task, status, room, due_date, description]
      );
      res.status(201).json(result.rows[0]);
   } catch (error) {
      console.error("Error creating task:", error);
      res.status(500).json({ error: "Internal Server Error" });
   }
});

// ✅ Update a task by UUID
app.put("/tasks/:id", async (req, res) => {
   const { id } = req.params;
   const { task, status, room, due_date, description } = req.body;
   try {
      const result = await pool.query(
         `UPDATE tasks 
          SET task = $1, status = $2, room = $3, due_date = $4, description = $5, date_modified = CURRENT_TIMESTAMP 
          WHERE id = $6 RETURNING *;`,
         [task, status, room, due_date, description, id]
      );
      if (result.rows.length === 0) {
         return res.status(404).json({ error: "Task not found" });
      }
      res.json(result.rows[0]);
   } catch (error) {
      console.error("Error updating task:", error);
      res.status(500).json({ error: "Internal Server Error" });
   }
});

// ✅ Delete a task by UUID
app.delete("/tasks/:id", async (req, res) => {
   const { id } = req.params;

   try {
      const result = await pool.query("DELETE FROM tasks WHERE id = $1 RETURNING *;", [id]);

      if (result.rows.length === 0) {
         return res.status(404).json({ error: "Task not found" });
      }

      res.json({ message: "Task deleted successfully" });
   } catch (error) {
      console.error("Error deleting task:", error);
      res.status(500).json({ error: "Internal Server Error" });
   }
});

// ✅ Confirm server is running
app.get("/", (req, res) => {
   res.send("DixonList API is running...");
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
